# 586 observations
length(unique(dempats$id))
# 868 observations
length(unique(demno$id))
68+119
dempats$age[1,]
dempats$age[1]
dempats$ageonset[1] - dempats$age[1]
84.4-71.9
# average time to diagnosis
timetodx <- function(dempats){
dempats$ageonset[1] - dempats$age[1]
}
aggregate(dempats, by = list(factor(dempats$id)), FUN = timetodx)
aggregate.data.frame(dempats, by = list(factor(dempats$id)), FUN = timetodx)
# average time to diagnosis
timetodx <- function(x){
x$ageonset[1] - x$age[1]
}
aggregate.data.frame(dempats, by = list(factor(dempats$id)), FUN = timetodx)
idw <- unique(dat.final$id)
table(dat.final$id, dat.final$ageonset)
aggregate(dempats$ageonset, by = list(factor(dempats$id)))
aggregate(dempats$ageonset, by = list(factor(dempats$id)), FUN = mean)
aggregate(dat.final$ageonset, by = list(factor(dat.final$id)), FUN = mean)
rm(list = c("dat.wide", "nummeas", "i", "idu", "idw", "timetodx"))
rm(dat)
dat.wide$idw <- unique(dat.final$id)
dat.wide <- data.frame(NULL)
dat.wide$idw <- unique(dat.final$id)
dat.wide <- NULL
dat.wide$idw <- unique(dat.final$id)
dat.wide <- as.data.frame(dat.wide)
aggregate(dat.final$ageonset, by = list(factor(dat.final$id)), FUN = mean)$x
dat.wide$ageonset <- aggregate(dat.final$ageonset, by = list(factor(dat.final$id)), FUN = mean)$x
summary(dat.wide)
dat.wide$SES <- aggregate(dat.final$SES, by = list(factor(dat.final$id)), FUN = mean)$x
summary(dat.wide)
# average number of measures taken on a subject
nummeas <- aggregate(x = dat.final$animals, by = list(factor(dat.final$id)), FUN = length)
max(nummeas$x)
min(nummeas$x)
# average time to diagnosis
timetodx <- function(x){
ageonset[1] - age[1]
}
aggregate.data.frame(dempats, by = list(factor(dempats$id)), FUN = timetodx)
aggregate.data.frame(dempats, by = list(factor(dempats$id)), FUN = timetodx, data = dempats)
# average time to diagnosis
idu <- unique(dempats$id)
timetodx <- NULL
for(i in idu){
subid <- subset(dempats, id == i)
timetodx[i] <- subid$ageonset - subid$age[1]
}
idu
for(val in idu){
timetodx[val] <- idu
}
str(idu)
test <- c(2, 5, 8, 9)
str(test)
# average time to diagnosis
idu <- as.numeric(unique(dempats$id))
str(idu)
for(val in idu){
timetodx[val] <- idu
}
summary(demno)
mean(demno$SES)
sd(demno$SES)
# baseline SES
mean(dempats$SES)
sd(dempats$SES)
# proportion of females
dempats.fem <- subset(dempats, gender == "female")
length(unique(dempats.fem$id))
dempats.ma <- subset(dempats, gender == "male")
length(unique(dempast.ma$id))
length(unique(dempats.ma$id))
length(unique(dempats.fem$id))/length(unique(dempats$id))
45/68
length(unique(dempats.fem$id))/length(unique(dempats$id))*100
# proportion of females
demno.fem <- subset(demno, gender == "female")
length(unique(demno.fem$id))
demno.ma <- subset(demno, gender == "male")
length(unique(demno.ma$id))
60+59
length(unique(demno.fem$id))/length(unique(demno$id))
length(unique(demno.fem$id))/length(unique(demno$id))*100
# average number of measurements
nummeas.di <- aggregate(x = dempats$animals, by = list(factor(dempats$id)), FUN = length)
mean(nummeas.di$x)
sd(nummeas.di$x)
# average number of measurements
nummeas.no <- aggregate(x = demno$animals, by = list(factor(demno$id)), FUN = length)
mean(nummeas.no$x)
sd(nummeas.no$x)
# average baseline age
baseage.di <- aggregate(x = dempats$age, by = list(factor(dempats$id)), FUN = min)
mean(baseage.di$x)
sd(baseage.di$x)
# average baseline age
baseage.no <- aggregate(x = demno$age, by = list(factor(demno$id)), FUN = min)
mean(baseage.no$x)
sd(baseage.no$x)
# average time followed
tfollow.no <- aggregate(x = demno$age, by = list(factor(demno$id)), FUN = function(){max - min})
# average time followed
tfollow.no <- aggregate(x = demno$age, by = list(factor(demno$id)), FUN = function(){max() - min()})
# average time followed
tfollow.no <- aggregate(x = demno$age, by = list(factor(demno$id)), FUN = function(x){max(x) - min(x)})
demno[1:20]
demno[1:20, ]
mean(tfollow.no$x)
sd(tfollow.no$x)
# average time followed
tfollow.di <- aggregate(x = dempats$age, by = list(factor(dempats$id)), FUN = function(x){max(x) - min(x)})
mean(tfollow.di$x)
sd(tfollow.di$x)
# average age onset
mean(dempats$ageonset)
sd(dempats$ageonset)
# animals
an <- ggplot(data = dat.final, aes(x=age, y=animals, group=id, colour = demind)) + geom_line() +
labs(title = "Category Fluency for Animals", x = "age", y = "animals score",
color = "Dementia Diagnosis")
# Spaghetti plots of raw data
library(ggplot2)
library(gridExtra)
library(lattice)
# animals
an <- ggplot(data = dat.final, aes(x=age, y=animals, group=id, colour = demind)) + geom_line() +
labs(title = "Category Fluency for Animals", x = "age", y = "animals score",
color = "Dementia Diagnosis")
an
# outcomes distributions
hist(dat$animals, main = "Animals", xlab = "animals score")
# outcomes distributions
hist(dat.final$animals, main = "Animals", xlab = "animals score")
# Spaghetti plot with years before diagnosis on the x axis (just for people with dementia diagnosis)
dempats$yearsbeforedx <- dempats$age - dempats$ageonset
an2 <- ggplot(data = dempats, aes(x=yearsbeforedx, y=animals) + geom_line() +
labs(title = "Patients with Dementia Diagnosis", x = "years before diagnosis",
y = "animals score"))
an2
an2 <- ggplot(data = dempats, aes(x=yearsbeforedx, y=animals)) + geom_line() +
labs(title = "Patients with Dementia Diagnosis", x = "years before diagnosis",
y = "animals score")
an2
an2 <- ggplot(data = dempats, aes(x=yearsbeforedx, y=animals, group = id)) + geom_line() +
labs(title = "Patients with Dementia Diagnosis", x = "years before diagnosis",
y = "animals score")
an2
an2 + geom_vline(xintercept = 0, color = "red", linetype = "dashed")
an2 <- ggplot(data = dempats, aes(x=yearsbeforedx, y=animals, group = id)) + geom_line() +
labs(title = "Patients with Dementia Diagnosis", x = "years before diagnosis",
y = "animals score", color = "Dementia Diagnosis")
an2 + geom_vline(xintercept = 0, color = "red", linetype = "dashed")
an2 <- ggplot(data = dempats, aes(x=yearsbeforedx, y=animals, group = id)) + geom_line() +
geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Patients with Dementia Diagnosis", x = "years before diagnosis",
y = "animals score", color = "Dementia Diagnosis")
an2
an2 <- ggplot(data = dempats, aes(x=yearsbeforedx, y=animals, group = id)) + geom_line() +
labs(title = "Patients with Dementia Diagnosis", x = "years before diagnosis",
y = "animals score")
an2 + geom_vline(xintercept = 0, color = "red", linetype = "dashed", label = "diagnosis")
an2 + geom_vline(xintercept = 0, color = "red", linetype = "cutoff", label = "diagnosis")
an2 + geom_vline(xintercept = 0, color = "red", linetype = "dashed", labels = "diagnosis")
an2 + geom_vline(xintercept = 0, color = "red", linetype = "dashed")
an2 <- ggplot(data = dempats, aes(x=yearsbeforedx, y=animals, group = id)) + geom_line() +
geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Patients with Dementia Diagnosis", x = "years before diagnosis",
y = "animals score")
an2
# display both together
grid.arrange(an, an2 ncol=2)
# display both together
grid.arrange(an, an2, ncol=2)
# average baseline animals
basean.no <- aggregate(x = demno$animals, by = list(factor(demno$id)), FUN = function(x){x[1]})
demno[1:20]
demno[1:20, ]
demno[1:50, ]
demno[1:60, ]
mean(basean.no$x)
sd(basean.no$x)
# average animals at last visit
lastan.no <- aggregate(x = demno$animals, by = list(factor(demno$id)), FUN = function(x){x[lenght(x)]})
# average animals at last visit
lastan.no <- aggregate(x = demno$animals, by = list(factor(demno$id)), FUN = function(x){x[length(x)]})
mean(lastan.no)
mean(lastan.no$x)
sd(lastan.no$x)
# average baseline animals
basean.di <- aggregate(x = dempats$animals, by = list(factor(dempats$id)), FUN = function(x){x[1]})
mean(basean.di$x)
sd(basean.di$x)
# average animals at last visit
lastan.no <- aggregate(x = dempats$animals, by = list(factor(dempats$id)), FUN = function(x){x[length(x)]})
mean(lastan.di$x)
sd(lastan.di$x)
# average animals at last visit
lastan.di <- aggregate(x = dempats$animals, by = list(factor(dempats$id)), FUN = function(x){x[length(x)]})
mean(lastan.di$x)
sd(lastan.di$x)
rm(list = c("baseage.di", "baseage.no", "basean.di", "baseab.no", "dat.wide", "demno.fem", "demno.ma",))
> rm(list = c("baseage.di", "baseage.no", "basean.di", "baseab.no", "dat.wide", "demno.fem", "demno.ma"))
> rm(list = c("baseage.di", "baseage.no", "basean.di", "basean.no", "dat.wide", "demno.fem", "demno.ma"))
rm(list = c("baseage.di", "baseage.no", "basean.di", "baseab.no", "dat.wide", "demno.fem", "demno.ma",))
rm(list = c("baseage.di", "baseage.no", "basean.di", "basean.no", "dat.wide", "demno.fem", "demno.ma"))
rm(list = c("an", "an2", "dempats.fem", "dempats.ma", "lastan.di", "lastan.no", "nummeas", "nummeas.di", "nummeas.no", "subid", "tfollow.di", "tfollow.no", "i", "idu", "test", "timetodx", "val", "keep3ormore"))
# try to make function like Camille's example to search for change point and fit model
# also trying to do what they did in the Hall paper
cps <- seq(from = 0, to = 10, by = 0.1)
cp.SearchAndFit <- function(id, y, t1, to, v1, v2, v3, cps){
# create empty df to store likelihood values from the search for the changepoint
ll <- data.frame(ChangePoint = rep(NA, length(cps)), llval = rep(NA, length(cps)))
# search the data for the change point
for(i in 1:length(cps)){
cp <- cps[i]
t2 <- ifelse(to - t1 >= cp, 0, t1 - to + cp)
ChangePointMod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~1 | id, method = 'ML')
ll[i, ] <- c(cp, logLik(ChangePointMod))
}
# plot log likelihood
plot(ll$ChangePoint, ll$llval, type = 'l', xlab = 'Change Point (months', ylab = 'Log Likelihood')
# maximize the likelihood to identify the change point
cphat <- ll[which(ll$llval == max(ll$llval)), 'ChangePoint']
# fit final model with change point mle included
t2 <- ifelse(to - t1 >= cphat, 0, t1 - to + cphat)
finalmod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~ 1 | id, method = 'ML')
# have function output list containing the change point identified and model results
return(list(cp = cp, model = finalmod))
}
## FINAL CLEANING FOR MODEL RUNNING = RECODE NAS ##
# put ageonset = 999 instead of NA for people who did not get dementia
# this will be important for making function work for model
# so that there is only a change point term for people with dementia diagnosis
dat.final$ageonset <- ifelse(is.na(dat.final$ageonset), 999, dat.final$ageonset)
mod <- cp.SearchAndFit(id = dat.final$id, y = dat.final$animals, t1 = dat.final$age,
to = dat.final$ageonset, v1 = dat.final$demind, v2 = dat.final$gender,
v3 = dat.final$SES, cps = cps)
# investigators want to include gender and SES as covariates in models
# separate mixed models for each outcome
library(nlme)
mod <- cp.SearchAndFit(id = dat.final$id, y = dat.final$animals, t1 = dat.final$age,
to = dat.final$ageonset, v1 = dat.final$demind, v2 = dat.final$gender,
v3 = dat.final$SES, cps = cps)
mod
cp.SearchAndFit <- function(id, y, t1, to, v1, v2, v3, cps){
# create empty df to store likelihood values from the search for the changepoint
ll <- data.frame(ChangePoint = rep(NA, length(cps)), llval = rep(NA, length(cps)))
# search the data for the change point
for(i in 1:length(cps)){
cp <- cps[i]
t2 <- ifelse(to - t1 >= cp, 0, t1 - to + cp)
ChangePointMod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~1 | id, method = 'ML')
ll[i, ] <- c(cp, logLik(ChangePointMod))
}
# plot log likelihood
plot(ll$ChangePoint, ll$llval, type = 'l', xlab = 'Change Point', ylab = 'Log Likelihood')
# maximize the likelihood to identify the change point
cphat <- ll[which(ll$llval == max(ll$llval)), 'ChangePoint']
# fit final model with change point mle included
t2 <- ifelse(to - t1 >= cphat, 0, t1 - to + cphat)
finalmod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~ 1 | id, method = 'ML')
# have function output list containing the change point identified and model results
return(list(cp = cphat, model = finalmod))
}
mod <- cp.SearchAndFit(id = dat.final$id, y = dat.final$animals, t1 = dat.final$age,
to = dat.final$ageonset, v1 = dat.final$demind, v2 = dat.final$gender,
v3 = dat.final$SES, cps = cps)
mod
cp.SearchAndFit <- function(id, y, t1, to, v1, v2, v3, cps){
# create empty df to store likelihood values from the search for the changepoint
ll <- data.frame(ChangePoint = rep(NA, length(cps)), llval = rep(NA, length(cps)))
# search the data for the change point
for(i in 1:length(cps)){
cp <- cps[i]
t2 <- ifelse(to - t1 >= cp, 0, t1 - to + cp)
ChangePointMod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~1 | id, method = 'ML')
ll[i, ] <- c(cp, logLik(ChangePointMod))
}
# plot log likelihood
plot(ll$ChangePoint, ll$llval, type = 'l', xlab = 'Change Point', ylab = 'Log Likelihood')
# maximize the likelihood to identify the change point
cphat <- ll[which(ll$llval == max(ll$llval)), 'ChangePoint']
# add reference line to plot
abline(v = cphat)
# fit final model with change point mle included
t2 <- ifelse(to - t1 >= cphat, 0, t1 - to + cphat)
finalmod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~ 1 | id, method = 'ML')
# have function output list containing the change point identified and model results
return(list(cp = cphat, model = finalmod))
}
mod <- cp.SearchAndFit(id = dat.final$id, y = dat.final$animals, t1 = dat.final$age,
to = dat.final$ageonset, v1 = dat.final$demind, v2 = dat.final$gender,
v3 = dat.final$SES, cps = cps)
mod
cp.SearchAndFit <- function(id, y, t1, to, v1, v2, v3, cps){
# create empty df to store likelihood values from the search for the changepoint
ll <- data.frame(ChangePoint = rep(NA, length(cps)), llval = rep(NA, length(cps)))
# search the data for the change point
for(i in 1:length(cps)){
cp <- cps[i]
t2 <- ifelse(to - t1 >= cp, 0, t1 - to + cp)
ChangePointMod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~1 | id, method = 'ML')
ll[i, ] <- c(cp, logLik(ChangePointMod))
}
# plot log likelihood
plot(ll$ChangePoint, ll$llval, type = 'l', xlab = 'Change Point', ylab = 'Log Likelihood')
# maximize the likelihood to identify the change point
cphat <- ll[which(ll$llval == max(ll$llval)), 'ChangePoint']
# add reference line to plot
abline(v = cphat, lty = 2, lwd = 2, color = "red")
# fit final model with change point mle included
t2 <- ifelse(to - t1 >= cphat, 0, t1 - to + cphat)
finalmod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~ 1 | id, method = 'ML')
# have function output list containing the change point identified and model results
return(list(cp = cphat, model = finalmod))
}
mod <- cp.SearchAndFit(id = dat.final$id, y = dat.final$animals, t1 = dat.final$age,
to = dat.final$ageonset, v1 = dat.final$demind, v2 = dat.final$gender,
v3 = dat.final$SES, cps = cps)
mod
cp.SearchAndFit <- function(id, y, t1, to, v1, v2, v3, cps){
# create empty df to store likelihood values from the search for the changepoint
ll <- data.frame(ChangePoint = rep(NA, length(cps)), llval = rep(NA, length(cps)))
# search the data for the change point
for(i in 1:length(cps)){
cp <- cps[i]
t2 <- ifelse(to - t1 >= cp, 0, t1 - to + cp)
ChangePointMod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~1 | id, method = 'ML')
ll[i, ] <- c(cp, logLik(ChangePointMod))
}
# plot log likelihood
plot(ll$ChangePoint, ll$llval, type = 'l', xlab = 'Change Point', ylab = 'Log Likelihood')
# maximize the likelihood to identify the change point
cphat <- ll[which(ll$llval == max(ll$llval)), 'ChangePoint']
# add reference line to plot
abline(v = cphat, lty = 2, lwd = 2, col = "red")
# fit final model with change point mle included
t2 <- ifelse(to - t1 >= cphat, 0, t1 - to + cphat)
finalmod <- lme(y ~ t1 + v1 + t1:v1 + v2 + v3 + t2, random = ~ 1 | id, method = 'ML')
# have function output list containing the change point identified and model results
return(list(cp = cphat, model = finalmod))
}
mod <- cp.SearchAndFit(id = dat.final$id, y = dat.final$animals, t1 = dat.final$age,
to = dat.final$ageonset, v1 = dat.final$demind, v2 = dat.final$gender,
v3 = dat.final$SES, cps = cps)
mod
summary(mod$model)
## ESTIMATES AND HYPOTHESIS TESTING ##
library(multcomp)
coeff
coeff <- mod$model$coefficients$fixed
coeff
# estimated rate of decline for those without dementia diagnosis
confint(glht(mod$model, matrix(c(0, 1, 0, 0, 0, 0, 0), nrow=1)))
# estimated rate of decline for those with dementia before change point
# this is the slope you'd compare to those without dementia if interested
confint(glht(mod$model, matrix(c(0, 1, 0, 0, 0, 0, 1), nrow=1)))
# estimated rate of decline for those with dementia after change point
confint(glht(mod$model, matrix(c(0, 1, 0, 0, 0, 1, 1), nrow=1)))
set.seed(1234)
# estimated difference between slope of those without dem compared to those with dem before cp
confint(glht(mod$model, matrix(c(0, 0, 0, 0, 0, 0, 1), nrow=1)))
# estimated difference between slope before and after change point in those with dem
confint(glht(mod$model, matrix(c(0, 0, 0, 0, 0, 1, 0), nrow-1)))
# estimated difference between slope before and after change point in those with dem
confint(glht(mod$model, matrix(c(0, 0, 0, 0, 0, 1, 0), nrow=1)))
set.seed(1234)
boot.function<-function(id = dat.final$id, dat=dat.final, cps=cps){
#Step 1: Get a bootstrap sample of subjects (not observations!!)
idu <- unique(dat.final$id)
boot.subjects <- sample(idu, length(idu), replace=T)
# Now get the data (observations) for each of the chosen subjects from bootstrap sample
boot.dat<-NULL
for (i in 1:length(idu)){ temp<-cbind(i, dat[id == boot.subjects[i],])
boot.dat <- rbind(boot.dat, temp)
}
#Step 2: Repeat the analysis on the bootstrap sample
boot.model <-cp.SearchAndFit(id = boot.dat$i, y = boot.dat$animals, t1 = boot.dat$age,
to = boot.dat$ageonset, v1 = boot.dat$demind, v2 = boot.dat$gender,
v3 = boot.dat$SES, cps = cps)
#Step 3: Save the estimates and CP's
boot.rslt <- c(boot.model$cp,
confint(glht(boot.model$model, matrix(c(0, 1, 0, 0, 0, 0, 0), nrow=1)))$confint[1],
confint(glht(boot.model$model, matrix(c(0, 1, 0, 0, 0, 0, 1), nrow=1)))$confint[1],
confint(glht(boot.model$model, matrix(c(0, 1, 0, 0, 0, 1, 1), nrow=1)))$confint[1],
confint(glht(boot.model$model, matrix(c(0, 0, 0, 0, 0, 1, 0), nrow=1)))$confint[1],
confint(glht(boot.model$model, matrix(c(0, 0, 0, 0, 0, 0, 1), nrow=1)))$confint[1])
names(boot.rslt) <- c("ChangePoint", "No_Dementia_Slope", "Dementia_Slope_BeforeCP", "Dementia_Slope_AfterCP")
return(boot.rslt)
}
niter <- 1000
bootstraps <- matrix(NA, ncol = 6, nrow = 1000)
for (j in 1:niter){bootstraps[j,]<-boot.function(id = dat.final$id, dat=dat.final, cps=cps)
}
# Change Point
hist(bootstraps[,1], xlab="Change Point", main='Bootstrap Distribution of Change Points')
View(bootstraps)
View(bootstraps)
View(bootstraps)
for (j in 684:686){bootstraps[j,]<-boot.function(id = dat.final$id, dat=dat.final, cps=cps)
}
View(bootstraps)
View(bootstraps)
for (j in 687:niter){bootstraps[j,]<-boot.function(id = dat.final$id, dat=dat.final, cps=cps)
}
View(bootstraps)
View(bootstraps)
# Change Point
hist(bootstraps[,1], xlab="Change Point", main='Bootstrap Distribution of Change Points')
lines(c(cp,cp), c(0,1000), col='red')
lines(c(mean(bootstraps[,1]),mean(bootstraps[,1])), c(0,1000))
mean(bootstraps[,1])
sd(bootstraps[,1])
quantile(bootstraps[,1], c(0.025, 0.975))
# Slope Estimate Subjects Without Dementia
hist(bootstraps[,2], xlab="No Dementia Slope", main='Bootstrap Estimates of No Dementia Slope')
lines(c(-3.3010,-3.3010), c(0,1000), col='red')
lines(c(mean(bootstraps[,2]),mean(bootstraps[,2])), c(0,1000))
mean(bootstraps[,2])
sd(bootstraps[,2])
quantile(bootstraps[,2], c(0.025, 0.975)) # ()
#Get percentile CI's for other estimates of interest
quantile(bootstraps[,3], c(0.025, 0.975))
sd(bootstraps[, 3])
quantile(bootstraps[,4], c(0.025, 0.975))
sd(bootstraps[, 4])
quantile(bootstraps[, 5], c(0.025, 0.975))
sd(bootstraps[, 5])
quantile(boostraps[, 6], c(0.025, 0.975))
quantile(bootsraps[, 6], c(0.025, 0.975))
quantile(bootstraps[, 6], c(0.025, 0.975))
sd(bootstraps[, 6])
# Calculating t statistics
t2 <- -0.1776/0.0251
t3 <- -0.1797/0.0819
t4 <- -1.0866/0.1187
t5 <- -0.907/0.1587
t6 <- -0.002/0.085
# Calculating p-values
pt(-0.0277754, df = 1264)
# Calculating p-values
qt(-0.0277754, df = 1264)
# Calculating p-values
qt(abs(-0.0277754), df = 1264)
# Calculating p-values
pt(-0.027754, df = 1264)
# Calculating p-values
pt(-0.027754, df = 1264, lower.tail = FALSE)
pt(-0.977158, df = 183)
# Calculating p-values
pt(t2, df = 1264)
pt(t3, df - 1264)
pt(t3, df = 1264)
pt(t4, df = 1264)
pt(t5, df = 1264)
pt(t6, df = 1264)
# plot of predicted values for a few of the subjects (5 from each group)?
pred <- mod$model$fitted
View(mod)
pred[1:50]
pred[1:50, ]
dat.final[1:50]
dat.final[1:50, ]
pred <- as.data.frame(pred)
pred$predicted <- pred$id
pred$id <- dat.final$id
# attach the id column
pred[1:50, ]
# choose 5 ids from each group
dempats[1:50, ]
# ids with diagnosis: 101, 102, 107,
# ids without diagnosis
demno[1:50, ]
predsub <- subset(pred, id == c(101, 102, 103, 107, 109, 119, 122, 124))
keepids <- c(101, 102, 103, 107, 109, 119, 122, 124)
predsub <- subset(pred, id == keepids)
predsub <- pred[pred$id == keepids]
predsub <- [pred$id == keepids]
predsub <- pred$id == keepids
pred[1:200, ]
pred$demin <- dat.final$demind
pred[1:200, ]
predsub <- pred[1:144, ]
pred$age <- dat.final$age
predsub <- pred[1:144, ]
length(unique(predsub$id))
fitgraph <- ggplot(data = predsub, aes(x=age, y=predicted, group=id, colour = demind)) + geom_line() +
labs(title = "Fitted Lines for 17 Subjects", x = "age", y = "predicted animals score",
color = "Dementia Diagnosis")
fitgraph
fitgraph <- ggplot(data = predsub, aes(x=age, y=predicted, group=id, colour = demin)) + geom_line() +
labs(title = "Fitted Lines for 17 Subjects", x = "age", y = "predicted animals score",
color = "Dementia Diagnosis")
fitgraph
predsub <- pred[1:199, ]
length(unique(predsub$id))
fitgraph <- ggplot(data = predsub, aes(x=age, y=predicted, group=id, colour = demin)) + geom_line() +
labs(title = "Fitted Lines for 17 Subjects", x = "age", y = "predicted animals score",
color = "Dementia Diagnosis")
fitgraph
fitgraph <- ggplot(data = predsub, aes(x=age, y=predicted, group=id, colour = demin)) + geom_line() +
labs(title = "Fitted Lines for 26 Subjects", x = "age", y = "predicted animals score",
color = "Dementia Diagnosis")
fitgraph
